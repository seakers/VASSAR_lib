function results = RBES_science_assessment(r,params)
%% RBES_Evaluate_Manifest.m
% This function assumes that missions have been manifested and evaluates
% them, giving a single score to them as a whole


%% Focus MANIFEST and run to assert manifested instruments and get their
% 1) assert instruments of each mission (salience 20)
% 2) inherit instrument attributes from instrument database (salience 10, not needed )
% 3) inherit instrument attributes from mission (e.g orbit) (salience 10,  not needed)

if params.WATCH, fprintf('Manifest...\n');end
r.eval('(focus MANIFEST)');
r.run;

if params.MEMORY_SAVE
    % remove manifest rules, not needed anymore
    list_rules = r.listDefrules();
    while list_rules.hasNext()
        rule = list_rules.next().getName();
        if rule.startsWith('MANIFEST')
            r.removeDefrule(rule);
        end
    end
    clear list_rules rule

end

%% Focus CAPABILITIES and run to get REQUIREMENTS::measurements
% 1) assert measurements for each instrument
% 2) inherit measurement attributes from instrument (salience -10)

if params.WATCH, fprintf('Capabilities...\n');end

r.eval('(focus CAPABILITIES)');
r.run;

%% Cross-register all measurements in same satellite at the platform level
facts = r.listFacts(); % iterator
ns = max(params.NumberOfMissions);% or params.number_of_missions from Evaluate_architecture
measurement_list_str = cell(1,ns);
measurement_list_array = cell(1,ns);
for i = 1:ns
    measurement_list_array(i) = java.util.ArrayList;
end

while facts.hasNext()
    f = facts.next();
    if ~strcmp(f.getDeftemplate,'[deftemplate REQUIREMENTS::Measurement]')
        continue
    end
    str = char(f.getSlotValue('flies-in').stringValue(r.getGlobalContext()));
    if params.SCHEDULING
        s = params.MissionIds.get(str);% this needs to be added to RBES_Iridium_Params!!
    else
        s = str2num(str(end));
    end
    
    id_str = f.getSlotValue('Id').stringValue(r.getGlobalContext());
    if ~measurement_list_array{s}.contains(id_str)
        measurement_list_array{s}.add(id_str);
        measurement_list_str{s} = [measurement_list_str{s} ' ' char(id_str)];
    end
end
clear facts f measurement_list_array

for s = 1:ns
    call = ['(assert (SYNERGIES::cross-registered '...
        ' (measurements ' measurement_list_str{s} ') '...
        ' (degree-of-cross-registration spacecraft) '...
        ' (platform ' char(params.satellite_names) '-' num2str(s) ' ) '...
        '))' ];
    r.eval(call);
end
clear measurement_list_str

if params.MEMORY_SAVE
    % remove Capabilities rules, not needed anymore
    list_rules = r.listDefrules();
    while list_rules.hasNext()
        rule = list_rules.next().getName();
        if rule.startsWith('CAPABILITIES')
            r.removeDefrule(rule);
        end
    end
    clear list_rules rule

end
%% Focus FUZZY and run to compute fuzzy qualitative values from numerical values
% This needs to run after assimilation only of we need to run assimilation,
% otherwise can run it before synergies, and a lot of computational time is
% saved
if ~params.ASSIMILATION
    if params.WATCH, fprintf('Fuzzy...\n');end
%     jess watch all
    r.eval('(focus FUZZY)');
    r.run();
%     jess unwatch all
    if params.MEMORY_SAVE
        list_rules = r.listDefrules();
        while list_rules.hasNext()
            rule = list_rules.next().getName();
            if rule.startsWith('FUZZY')
                r.removeDefrule(rule);
            end
        end
        clear list_rules rule

    end
end

%% Focus SYNERGIES and run to get synergies between measurements
% 1) Modify measurements in the presence of others (does retract and assert) from xls database (salience -5)
% 2) spatial-disaggregation, space/time averaging
% 3) Assert new measurements from combinations of others

if params.WATCH, fprintf('Synergies...\n');end
r.eval('(focus SYNERGIES)');
r.run;

if params.MEMORY_SAVE
    % remove SYNERGIES rules, not needed anymore
    list_rules = r.listDefrules();
    while list_rules.hasNext()
        rule = list_rules.next().getName();
        if rule.startsWith('SYNERGIES')
            r.removeDefrule(rule);
        end
    end
    clear list_rules rule
end

%% Load ASSIMILATION rules, focus, run, and compute assimilated revisit times
if params.ASSIMILATION
    if params.WATCH, fprintf('Assimilation 1...\n');end

    %[r,params] = load_assimilation_rules(r,params); % can't load them before because they fire too soon

    % Create map of measurements with same orbit to compute real revisit timesw
    call = ['(defrule ASSIMILATION::test ' ...
        ' (declare (salience 5)) ' ...
        ' ?c <- (accumulate (bind ?map (new java.util.HashMap))   ' ...
        ' ((lambda (?pa ?alt ?ra ?an ?fo ?in) ' ...
        ' (if (?map containsKey ?pa) then ' ...
        ' (bind ?x (?map get ?pa)) ' ...
        ' (?x add (create$ ?fo ?alt ?in ?ra ?an)) ' ...
        ' (?map put ?pa ?x) ' ...
        ' else ' ...
        '	(bind ?list (new java.util.ArrayList))   ' ...
        '  (?list add (create$ ?fo ?alt ?in ?ra ?an)) ' ...
        '  (?map put ?pa ?list) ' ...
        ' )) ' ...
        ' ?p ?h ?raan ?ano ?fov ?inc) ' ...
        '  ?map  ' ...                                      ' ...
        ' (REQUIREMENTS::Measurement (Parameter ?p&~nil) (Field-of-view# ?fov) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-altitude# ?h) (orbit-anomaly# ?ano) (Id ?id) ' ...
        '      ))  ' ...
        ' => ' ...
        ' (store MAP ?c) ' ...
        ' )'];
    r.eval(call);
    r.eval('(focus ASSIMILATION)');
    r.run;

    % remove test rule
    r.removeDefrule('ASSIMILATION::test');

    % compute aggregated revisit times #
    map = r.eval('(fetch MAP)').javaObjectValue(r.getGlobalContext());% this is a map with key parameter, object = array of lists (fov,h,inc,raan,ano)
    meas_array = map.keySet.toArray;
    num_measurements = length(meas_array);
    for i = 1:num_measurements
        param = meas_array(i);
        list_of_orbits = map.get(param).toArray;%  array where each element is (fov,h,inc,raan,ano)
        [num_planes,num_sat_per_planes,h,inc,fov] = get_nplanes_and_nsats(list_of_orbits);
        call = ['(defrule ASSIMILATION::compute-aggregated-revisit-time-' num2str(i) ' ' ...
            '?m <- (REQUIREMENTS::Measurement (Parameter "' param '"))' ...
            '(DATABASE::Revisit-time-of (mission-architecture constellation) (num-of-planes# ' num2str(num_planes) ') ' ...
            '(num-of-sats-per-plane# ' num2str(num_sat_per_planes) ') ' ...
            '(orbit-altitude# ' num2str(h) ') ' ...
            '(orbit-inclination ' num2str(inc) ') ' ...
            '(instrument-field-of-view# ' num2str(fov) ') ' ...
            '(avg-revisit-time-global# ?glob) (avg-revisit-time-tropics# ?trop) (avg-revisit-time-northern-hemisphere# ?nh)' ...
            '(avg-revisit-time-southern-hemisphere# ?sh) (avg-revisit-time-cold-regions# ?cold) (avg-revisit-time-US# ?us))' ...
            ' => ' ...
            '(modify ?m (avg-revisit-time-global# ?glob) (avg-revisit-time-tropics# ?trop) (avg-revisit-time-northern-hemisphere# ?nh)' ...
            '(avg-revisit-time-southern-hemisphere# ?sh) (avg-revisit-time-cold-regions# ?cold) (avg-revisit-time-US# ?us))' ...
            ')'];
        r.eval(call);

    end
     
    [r,params] = load_assimilation_rules(r,params);% load rule to compute-temporal-resolution#-from-revisit-times
    % r.eval('(watch all)');
    if params.WATCH, fprintf('Assimilation 2...\n');end
    r.eval('(focus ASSIMILATION)');
    r.run;

    % remove ASSIMILATION rules, not needed anymore
    list_rules = r.listDefrules();
    while list_rules.hasNext()
        rule = list_rules.next().getName();
        if rule.startsWith('ASSIMILATION')
            r.removeDefrule(rule);
        end
    end
    clear list_rules rule
end
%% Focus FUZZY and run to compute fuzzy qualitative values from numerical values
% This needs to run after assimilation only of we need to run assimilation,
% otherwise can run it before synergies, and a lot of computational time is
% saved
if params.ASSIMILATION
    if params.WATCH, fprintf('Fuzzy...\n');end
%     jess watch all
    r.eval('(focus FUZZY)');
    r.run();
%     jess unwatch all
    if params.MEMORY_SAVE

        list_rules = r.listDefrules();
        while list_rules.hasNext()
            rule = list_rules.next().getName();
            if rule.startsWith('FUZZY')
                r.removeDefrule(rule);
            end
        end
        clear list_rules rule
    end
end
%% Focus REQUIREMENTS and run to get value
if params.WATCH, fprintf('Requirements...\n');end
r.eval('(focus REQUIREMENTS)');
r.run;
[score,panel_scores,objective_scores,subobjective_scores] = compute_scientific_benefit(r,params);
if params.SCHEDULING
    [data_continuity_score,data_continuity_matrix,dcmatrix_without_precursors] = check_data_continuity2(r,params);
end

if params.MEMORY_SAVE
    list_rules = r.listDefrules();
    while list_rules.hasNext()
        rule = list_rules.next().getName();
        if rule.startsWith('REQUIREMENTS')
            r.removeDefrule(rule);
        end
    end
    clear list_rules rule
end
%% Print results
if params.EXPLANATION
    if params.WATCH, fprintf('Explanations...\n'); end
    r.eval('(focus REASONING)');
    r.run;
end

%% Gather results
results.score                       = score;
results.panel_scores                = panel_scores;
results.objective_scores            = objective_scores;
results.subobjective_scores         = subobjective_scores;
if params.SCHEDULING
    results.data_continuity_score       = data_continuity_score;
    results.data_continuity_matrix      = data_continuity_matrix;
    results.dcmatrix_without_precursors = dcmatrix_without_precursors;
end
end