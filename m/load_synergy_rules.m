function [r,params] = load_synergy_rules(r,params)
%% One of a kind rules (new measurements)
r.eval(['(bind ?synergy_clp_file "' params.synergy_rules_clp '")']);
r.eval('(batch ?synergy_clp_file)');

%% Recurring rules: Improve measurements
[num,txt,raw] = xlsread(params.synergy_rules_xls,'Improve Measurements');
for i = 2:size(raw,1)
    line = raw(i,:);
    m1 = line{1};% is improved by m2
    m2 = line{2};% improves m1
    deg_of_crossreg = line{3};
    acc_req_m2 = line{4};
    improvement = line{5};
    
    call = ['(defrule SYNERGIES::Improve-Measurement' num2str(i) ' ' ...
        '(declare (salience 5))' ...
        '?m1 <- (REQUIREMENTS::Measurement (Parameter '  m1 ') ' ...
        '(Accuracy ?acc1&~nil) (Id ?id1))' ...
        '(REQUIREMENTS::Measurement (Parameter ' m2 ') ' ...
        '(Accuracy ?acc2) (Id ?id2))' ...
        '(SYNERGIES::cross-registered (measurements $?m))' ...
        '(test (member ?id1 $?m))' ...
        '(test (member ?id2 $?m))' ...
        ' => ' ...
        '(modify ?m1 (Accuracy (eval (Improve Accuracy ?acc1))))' ...
        ')'];
    r.eval(call);
end


return