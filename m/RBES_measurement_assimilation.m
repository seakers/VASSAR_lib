function RBES_measurement_assimilation
global params
r = global_jess_engine();

if params.WATCH, fprintf('Assimilation 1...\n');end

% Create map of measurements with same orbit to compute real revisit timesw
call = ['(defrule ASSIMILATION::test ' ...
    ' (declare (salience 5)) ' ...
    ' ?c <- (accumulate (bind ?map (new java.util.HashMap))   ' ...
    ' ((lambda (?pa ?alt ?ra ?an ?fo ?in) ' ...
    ' (if (?map containsKey ?pa) then ' ...
    ' (bind ?x (?map get ?pa)) ' ...
    ' (?x add (create$ ?fo ?alt ?in ?ra ?an)) ' ...
    ' (?map put ?pa ?x) ' ...
    ' else ' ...
    '	(bind ?list (new java.util.ArrayList))   ' ...
    '  (?list add (create$ ?fo ?alt ?in ?ra ?an)) ' ...
    '  (?map put ?pa ?list) ' ...
    ' )) ' ...
    ' ?p ?h ?raan ?ano ?fov ?inc) ' ...
    '  ?map  ' ...                                      ' ...
    ' (REQUIREMENTS::Measurement (Parameter ?p&~nil) (Field-of-view# ?fov) (orbit-inclination ?inc) (orbit-RAAN ?raan) (orbit-altitude# ?h) (orbit-anomaly# ?ano) (Id ?id) ' ...
    '      ))  ' ...
    ' => ' ...
    ' (store MAP ?c) ' ...
    ' )'];
r.eval(call);
r.eval('(focus ASSIMILATION)');
r.run(10000);

% remove test rule
r.removeDefrule('ASSIMILATION::test');

% compute aggregated revisit times #
map = r.eval('(fetch MAP)').javaObjectValue(r.getGlobalContext());% this is a map with key parameter, object = array of lists (fov,h,inc,raan,ano)
meas_array = map.keySet.toArray;
num_measurements = length(meas_array);
for i = 1:num_measurements
    param = meas_array(i);
    list_of_orbits = map.get(param).toArray;%  array where each element is (fov,h,inc,raan,ano)
    N = length(list_of_orbits);
    [num_planes,num_sat_per_planes,h,inc,fov] = get_nplanes_and_nsats(list_of_orbits);
    call = ['(defrule ASSIMILATION::compute-aggregated-revisit-time-' num2str(i) ' ' ...
        '?m <- (REQUIREMENTS::Measurement (Parameter "' param '"))' ...
        '(DATABASE::Revisit-time-of (mission-architecture constellation) (num-of-planes# ' num2str(num_planes) ') ' ...
        '(num-of-sats-per-plane# ' num2str(num_sat_per_planes) ') ' ...
        '(orbit-altitude# ' num2str(h) ') ' ...
        '(orbit-inclination ' num2str(inc) ') ' ...
        '(instrument-field-of-view# ' num2str(fov) ') ' ...
        '(avg-revisit-time-global# ?glob) (avg-revisit-time-tropics# ?trop) (avg-revisit-time-northern-hemisphere# ?nh)' ...
        '(avg-revisit-time-southern-hemisphere# ?sh) (avg-revisit-time-cold-regions# ?cold) (avg-revisit-time-US# ?us))' ...
        ' => ' ...
        '(modify ?m (avg-revisit-time-global# ?glob) (avg-revisit-time-tropics# ?trop) (avg-revisit-time-northern-hemisphere# ?nh)' ...
        '(avg-revisit-time-southern-hemisphere# ?sh) (avg-revisit-time-cold-regions# ?cold) (avg-revisit-time-US# ?us))' ...
        ')'];
    r.eval(call);
    
%     call = ['(defrule ASSIMILATION::compute-variable-error-' num2str(i) ' ' ...
%         '?m <- (REQUIREMENTS::Measurement (Parameter "' param '") (rms-variable-measurement# ?sigma_v&:(> ?sigma_v 1)) )' ...
%         ' => ' ...
%         '(modify ?m (rms-variable-measurement# (/ ?sigma_v ' num2str(N) ' )))' ...
%         ')'];
%     r.eval(call);
    

end
load_assimilation_rules;% load rule to compute-temporal-resolution#-from-revisit-times
r.removeDefrule('ASSIMILATION::test');
if params.WATCH, fprintf('Assimilation 2...\n');end
r.eval('(focus ASSIMILATION)');
r.run(10000);

% remove ASSIMILATION rules, not needed anymore
list_rules = r.listDefrules();
while list_rules.hasNext()
    rule = list_rules.next().getName();
    if rule.startsWith('ASSIMILATION')
        r.removeDefrule(rule)
    end
end
end