function [r,params] = load_mission2instrument_inheritance_rules(r,params)
r.eval(['(bind ?att_inheritance_clp_file "' params.attribute_inheritance_clp '")']);
r.eval('(batch ?att_inheritance_clp_file)');
[~,txt,~] = xlsread(params.template_definition_xls,'Attribute Inheritance');
miss2instr = txt(:,1:2);

%% Mission to instrument
for i =2:size(miss2instr,1)
    att = miss2instr{i,1};
    inherit = miss2instr{i,2};
    if strcmp(inherit,'Instrument Database') % Inherit directly from DATABASE::Instrument
        call = ['(defrule MANIFEST::get-' att '-from-database ' ...
        ' (declare (salience 10)) ' ...
        ' ?instr <- (CAPABILITIES::Manifested-instrument (Name ?name) (' att ' nil)) ' ...
        ' (DATABASE::Instrument (Name ?name) (' att ' ?value&:(neq ?value nil))) ' ...
         ' => ' ...
        ' (modify ?instr (' att ' ?value)) ' ...
        ' )'];
        r.eval(call);
    elseif strcmp(inherit,'Mission') % Inherit directly from Mission (typically not necessary because rule assert-manifested-instruments already does it for you
        call = ['(defrule MANIFEST::get-' att '-from-mission ' ...
        ' (declare (salience 10)) ' ...
        ' ?instr <- (CAPABILITIES::Manifested-instrument (Name ?name) (flies-in ?miss) (' att ' nil)) ' ...
        ' (MANIFEST::Mission (Name ?miss) (' att ' ?value&:(neq ?value nil))) ' ...
         ' => ' ...
        ' (modify ?instr (' att ' ?value)) ' ...
        ' )'];
        r.eval(call);
    end
    
    
end
return